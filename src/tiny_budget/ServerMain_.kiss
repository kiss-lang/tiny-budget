(loadFrom "kiss-express" "src/ServerUtil.kiss")

(import tiny_budget.ServerMain)
(import datetime.DateTime)
(import datetime.DateTimeInterval)

(defMacro scriptContent []
    (File.getContent "bin/frontend.js"))

(userProp :Array<Record> groundTruthValues [(MoneyAsOf (DateTime.now) 0)])
(userProp :Array<Record> transactions [])
(userProp :Array<Record> transactionsOverTime [])

(userProp :Map<String,Record> repeatTransactions (new Map))

(var dayDelta (DateTimeInterval.create (DateTime.fromDate (new Date 2023 0 1 0 0 0)) (DateTime.fromDate (new Date 2023 0 2 0 0 0))))
// TODO delete this
(var monthDelta (DateTimeInterval.create (DateTime.fromDate (new Date 2023 0 1 0 0 0)) (DateTime.fromDate (new Date 2023 1 1 0 0 0))))

(function :Null<Float> balanceAsOf [req :DateTime targetTime :Bool actual]
    (unless req.user (return 0))
    (let [gtv (get_user_groundTruthValues req)
            &mut :DateTime groundTruthTime null
            &mut :Float groundTruthAmount 0]

        (whileLet [(MoneyAsOf time amount) (gtv.shift)
                    time (DateTime.fromDate time)]
            (if #{time > targetTime;}#
                    (break)
                {
                    (set groundTruthTime time)
                    (set groundTruthAmount amount)
                }))

        (unless groundTruthTime
            (return null))

        // If this day starts a new instance of a repeat transaction, add it:
        (doFor =>label rt (get_user_repeatTransactions req)
            (case rt
                ((RepeatMoneyOver start end amount asOf)
                    (when (< start 0)
                        (set start (+ 1 (targetTime.daysInThisMonth) start)))
                    (when (< end 0)
                        (set end (+ 1 (targetTime.daysInThisMonth) end)))
                    
                    (when (= start (targetTime.getDay))
                        (let [&mut alreadyMadeOne false]
                            (doFor t (get_user_transactionsOverTime req)
                                (case t
                                    ((when (and (= thisLabel label) (= (.getMonth (DateTime.fromDate start)) (targetTime.getMonth)))
                                            (MoneyOver start _ amount _ thisLabel))
                                        (set alreadyMadeOne true)
                                        (break))
                                    (otherwise)))
                            (unless alreadyMadeOne
                                (withUserProp transactionsOverTime req
                                    (localVar endTime (DateTime.fromTime (+ (targetTime.getTime) (* (- end start) (dayDelta.getTotalSeconds)))))
                                    (localVar &mut asOfDateTime (DateTime.fromTime (endTime.getTime)))
                                    (loop 
                                        (if asOf
                                                {
                                                    #{asOfDateTime += dayDelta;}#
                                                    (let [desiredDayOfMonth 
                                                            (if (> asOf 0)
                                                                    asOf
                                                                (+ 1 (asOfDateTime.daysInThisMonth) asOf))]
                                                        (when (= (asOfDateTime.getDay) desiredDayOfMonth)
                                                            (break)))
                                                }
                                            (break)))
                                    (transactionsOverTime.push
                                        (MoneyOver
                                            targetTime
                                            endTime
                                            amount
                                            asOfDateTime
                                            label)))))))
                (never otherwise)))

        (let [&mut sum groundTruthAmount
                t (get_user_transactions req)
                tot (get_user_transactionsOverTime req)]

            (whileLet [(MoneyAsOf time amount) (t.shift)
                            tTime (DateTime.fromDate time)]
                (when #{tTime > groundTruthTime && tTime <= targetTime;}#
                    (+= sum amount)))

            (whileLet [(MoneyOver start end amount asOf) (tot.shift)]
                (unless asOf
                    (set asOf end))
                (let [startTime (DateTime.fromDate start)
                        endTime (DateTime.fromDate end)
                        elapsedStartTime (DateTime.fromTime (max (groundTruthTime.getTime) (startTime.getTime)))
                        elapsedEndTime (DateTime.fromTime (min (targetTime.getTime) (endTime.getTime)))
                        asOfTime (DateTime.fromDate asOf)]
                    (if actual
                            // For calculating an actual balance estimate, the "as of" time for all ongoing transactions must be passed
                            (when #{asOfTime > groundTruthTime && asOfTime <= targetTime;}#
                                (+= sum amount))
                        // For calculating a theoretical balance estimate, only the start, end, and targetTime matter
                        (if #{startTime >= groundTruthTime && targetTime > endTime;}#
                                (+= sum amount)
                            (when #{targetTime <= endTime && !(targetTime <= startTime);}#
                                (+= sum (* amount #{(elapsedEndTime - elapsedStartTime).getTotalSeconds() / (endTime - startTime).getTotalSeconds();}#)))))))

            sum)))

(var GRAPH_TIME_RANGE 365)
(var GRAPH_DEFAULT_YMAX 1000.0)
(var TICK_SIZE (/ GRAPH_DEFAULT_YMAX 25))

(kissExpress app [3000]
    (app.use (BodyParser.value.urlencoded))
    (app.get "/" ->[req res next]
        (let [&mut actualPoints ""
                    &mut theoreticalPoints ""
                    &mut tickLines ""
                    &mut minDay -GRAPH_TIME_RANGE
                    &mut minAmount 0.0
                    &mut maxAmount 0.0
                    &mut tableRows ""]
                
                (when req.user
                    (doFor =>label record (get_user_repeatTransactions req)
                        (case record
                            ((RepeatMoneyOver start end amount asOf)
                                (+= tableRows "<tr><td>${label}</td><td>$amount from $start to $end ")
                                (when asOf
                                    (+= tableRows "as of the next $asOf"))
                                (+= tableRows "</td></tr>"))
                            (never otherwise)))
                
                    (doFor day (range -GRAPH_TIME_RANGE GRAPH_TIME_RANGE)
                        (let [relativeDay (DateTime.fromTime #{DateTime.now().getTime() + dayDelta.getTotalSeconds() * day;}#)]
                            (let [actual (balanceAsOf req relativeDay true)
                                    theoretical (balanceAsOf req relativeDay false)]
                                (unless (or actual theoretical)
                                    (set minDay day))
                                (when actual
                                    (when (< actual minAmount)
                                        (set minAmount actual))
                                    (when (> actual maxAmount)
                                        (set maxAmount actual))
                                    (+= actualPoints "${day},$actual "))
                                (when theoretical
                                    (when (< theoretical minAmount)
                                        (set minAmount theoretical))
                                    (when (> theoretical maxAmount)
                                        (set maxAmount theoretical))
                                    (+= theoreticalPoints "${day},$theoretical ")))))
                
                (var MONTH_DAYS 30)
                (let [&mut tickOffset (- 1 (.getDay (DateTime.now)))
                        &mut nextX tickOffset]
                    (while (> nextX -GRAPH_TIME_RANGE)
                        (-= nextX MONTH_DAYS))
                    (while (<= nextX GRAPH_TIME_RANGE)
                        (+= tickLines "<polyline points=\"${nextX},$(- (fHalf TICK_SIZE)) ${nextX},$(fHalf TICK_SIZE)\" stroke=\"black\" />")
                        (+= nextX MONTH_DAYS))))
            
                (res.send (+ 
        "<head><title>${pageName}</title><script>$(scriptContent)</script></head> $(kissExpressHeader req)"
        "<style>td { border: 1px solid black; }</style>"
        "</head>"
        (when req.user (+
            "<body>"
                "<svg viewBox=\"${minDay} $(- (max GRAPH_DEFAULT_YMAX maxAmount)) $(+ GRAPH_TIME_RANGE (Math.abs minDay)) $(- (max GRAPH_DEFAULT_YMAX maxAmount) minAmount)\" preserveAspectRatio=\"none\" width=\"800\" height=\"480\">"
                    #"<g transform="scale(1,-1)">"#
                        "<polyline points=\"0,${minAmount} 0,$(max GRAPH_DEFAULT_YMAX maxAmount)\" stroke=\"black\" />" // Y-axis
                        "<polyline points=\"${-GRAPH_TIME_RANGE},0 ${GRAPH_TIME_RANGE},0\" stroke=\"black\" />" // X-axis
                        "<polyline points=\"${actualPoints}\" stroke=\"green\" fill=\"none\" />" // actual line
                        "<polyline points=\"${theoreticalPoints}\" stroke=\"purple\" fill=\"none\" />" // theoretical line
                        tickLines

                    "</g>"
                "</svg>"

                "<p>Actual balance: $(balanceAsOf req (DateTime.now) true)</p>"
                "<p>Theoretical balance: $(balanceAsOf req (DateTime.now) false)</p>"
                
                "<table>"
                tableRows
                "</table>"

                ###"
                <form action="/submit" method="post">
                    <label for="amountBox">Amount</label>
                    <input type="text" id="amountBox" name="amountBox"></input>
                    <label for="labelBox">Label</label>
                    <input type="text" id="labelBox" name="labelBox"></input>
                    <label for="startBox">Start (Day of Month, not 0)</label>
                    <input type="text" id="startBox" name="startBox"></input>
                    <label for="endBox">End (Day of Month, negative counts from end)</label>
                    <input type="text" id="endBox" name="endBox"></input>
                    <label for="asOfBox">As Of</label>
                    <input type="text" id="asOfBox" name="asOfBox"></input>
                    <label for="type">Transaction type:</label>
                    <select id="type" name="type">
                        <option value="Expense">Expense</option>
                        <option value="Gain">Gain</option>
                        <option value="GroundTruth">Ground Truth</option>
                        <option value="RecurringExpense">Recurring expense over time</option>
                        <option value="RecurringGain">Recurring gain over time</option>
                    </select>
                    <input type="submit" value="Submit"></input>
                </form>
                "###
            "</body>"))))))

    (app.post "/submit" ->[req res] {
        (try
            (let [amount (Std.parseFloat req.body.amountBox)]
                (print "handling ${req.body.type} of ${amount}")
                (withUserProps [groundTruthValues transactions transactionsOverTime repeatTransactions] req
                    (case req.body.type
                        ("GroundTruth"
                            (groundTruthValues.push (MoneyAsOf (Date.now) amount)))
                        ("Expense"
                            (transactions.push (MoneyAsOf (Date.now) -amount)))
                        ("Gain"
                            (transactions.push (MoneyAsOf (Date.now) amount)))
                        ("RecurringExpense"
                            (dictSet repeatTransactions req.body.labelBox
                                (RepeatMoneyOver 
                                    (ifLet [start (Std.parseInt req.body.startBox)] start 1)
                                    (ifLet [end (Std.parseInt req.body.endBox)] end -1)
                                    -amount
                                    (Std.parseInt req.body.asOfBox)))
                            null)
                        ("RecurringGain"
                            (dictSet repeatTransactions req.body.labelBox
                                (RepeatMoneyOver 
                                    (ifLet [start (Std.parseInt req.body.startBox)] start 1)
                                    (ifLet [end (Std.parseInt req.body.endBox)] end -1)
                                    amount
                                    (Std.parseInt req.body.asOfBox)) )
                            null)
                        (never otherwise))
                null))
            (catch [e] (print "couldn't parse amount")))
        
        (res.redirect "/")}))